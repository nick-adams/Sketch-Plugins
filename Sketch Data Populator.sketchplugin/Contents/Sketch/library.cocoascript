//===============================================
// sketch data populator - library
//===============================================

var Library = {};
(function(self) {


	//array conversion
	self.jsArray = jsArray;

	//file system
	self.askForJSON = askForJSON;
	self.readFileAsText = readFileAsText;
    self.getPresetsDir = getPresetsDir;
    self.loadPresets = loadPresets;

	//find layers
	self.findLayersInLayer = findLayersInLayer;
	self.findLayerInLayer = findLayerInLayer;
	self.resizeTextLayer = resizeTextLayer;
    self.refreshTextLayer = refreshTextLayer;
    self.getSelectedLayers = getSelectedLayers;

	//check layer type
	self.isLayerGroup = isLayerGroup;
	self.isLayerText = isLayerText;

	//other
	self.mergeStringWithValues = mergeStringWithValues;
    self.randomInteger = randomInteger;

    //ui elements
    self.createAlert = createAlert;
    self.createLabel = createLabel;
    self.createCheckbox = createCheckbox;
    self.createSelect = createSelect;


	//===============================================


	function jsArray(array) {
		var length = [array count];
        var jsArray = [];

        while (length--) {
            jsArray.push([array objectAtIndex: length]);
        }
        return jsArray;
	}


	function askForJSON() {
		var panel = [NSOpenPanel openPanel];

		[panel setTitle: "Select JSON"];
		[panel setMessage: "Please select the JSON file you'd like to use."];
		[panel setPrompt: "Select"];

		[panel setCanCreateDirectories: false];
  		[panel setCanChooseFiles: true];
  		[panel setCanChooseDirectories: false];
  		[panel setAllowsMultipleSelection: false];
  		[panel setShowsHiddenFiles: false];
  		[panel setExtensionHidden: false];

  		[panel setDirectoryURL: [NSURL fileURLWithPath: '/Users/' + NSUserName()]];

  		var pressedButton = [panel runModal];
  		if(pressedButton == NSOKButton) {
  			return [[panel URL] path];
  		}
	}


	function readFileAsText(path) {
        return [NSString stringWithContentsOfFile: path encoding: NSUTF8StringEncoding error: false];
    }


    function getPresetsDir() {

        //get script path
        var scriptPath = context.scriptPath;

        //get presets dir path
        var presetsDirPath = [scriptPath stringByAppendingPathComponent: '/../../../Presets/'];
        presetsDirPath = [presetsDirPath stringByStandardizingPath];

        return presetsDirPath;
    }


    function loadPresets() {

        //get presets path
        var presetsPath = getPresetsDir();

        //create file enumerator for presetsPath
        var url = [NSURL fileURLWithPath: presetsPath];
        var enumerator = [[NSFileManager defaultManager] enumeratorAtURL:url includingPropertiesForKeys:[NSURLIsDirectoryKey, NSURLNameKey, NSURLPathKey] options:NSDirectoryEnumerationSkipsHiddenFiles errorHandler: null];

        var presets = [];
        while(fileUrl = [enumerator nextObject]) {

            //make sure that file is JSON
            if([[fileUrl pathExtension] isEqualToString: 'json']) {

                //make sure it's a file
                var isDir = MOPointer.alloc().init();
                [fileUrl getResourceValue: isDir forKey: NSURLIsDirectoryKey error: null];
                if(!Number(isDir.value())) {
                    
                    //get relative path for preset
                    var presetPath = [fileUrl path];
                    var presetDisplayPath = [presetPath stringByReplacingOccurrencesOfString: presetsPath + '/' withString: ''];

                    //create preset structure
                    var preset = {
                        name: String([presetDisplayPath stringByDeletingPathExtension]),
                        path: String([fileUrl path])
                    };

                    //add item
                    presets.push(preset);
                }   
            } 
        }

        return presets;
    }


    function findLayersInLayer(name, exactMatch, type, rootLayer, subLayersOnly, layersToExclude) {

    	//create predicate format
    	var formatRules = ['(name != NULL)'];
    	var arguments = [];

    	//name
    	if(name) {
    		if(exactMatch) {
    			formatRules.push('(name == %@)');
    		}
    		else {
    			formatRules.push('(name like %@)');
    		}
    		arguments.push(name);
    	}

    	//type
    	if(type) {
    		formatRules.push('(className == %@)');
    		arguments.push(type);
    	}
    	else {
    		formatRules.push('(className == "MSLayerGroup" OR className == "MSShapeGroup" OR className == "MSArtboardGroup" OR className == "MSTextLayer")');
    	}

    	//layers to exclude
    	if(layersToExclude) {
    		formatRules.push('NOT (SELF IN %@)');
    		arguments.push(excludedLayers);
    	}

    	//prepare format string
    	var formatString = formatRules.join(' AND ');

    	//create predicate
        predicate = [NSPredicate predicateWithFormat: formatString argumentArray: arguments];

        //get layers to filter
        var layers;
        if (subLayersOnly) {
            layers = [[rootLayer layers] array];
        } else {
            layers = [rootLayer children];
        }

        //perform query
        var queryResult = [layers filteredArrayUsingPredicate: predicate];

        //return result as js array
        return jsArray(queryResult);
    }


    function findLayerInLayer(name, exactMatch, type, rootLayer, subLayersOnly, layersToExclude) {
        var result = findLayersInLayer(name, exactMatch, type, rootLayer, subLayersOnly, layersToExclude);

        //return first layer in result
        if (result.length) return result[0];
    }


	function resizeTextLayer(layer) {
	    [layer adjustFrameToFit];
	    [layer select: true byExpandingSelection: false];
	    [layer setIsEditingText: true];
	    [layer setIsEditingText: false];
	    [layer select: false byExpandingSelection: false];
	}


    function refreshTextLayer(layer) {
        [layer select: true byExpandingSelection: false];
        [layer setIsEditingText: true];
        [layer setIsEditingText: false];
        [layer select: false byExpandingSelection: false];
    }


    function getSelectedLayers() {

        var selectedLayers = [];
        if(context.selection.count() > 0) {
            selectedLayers = jsArray(context.selection);
        }

        return selectedLayers;
    }


    function isLayerGroup(layer) {
        return ([layer isKindOfClass: [MSLayerGroup class]] && ![layer isKindOfClass: [MSShapeGroup class]]);
    }


    function isLayerText(layer) {
        return ([layer isKindOfClass: [MSTextLayer class]]);
    }


	function mergeStringWithValues(string, values) {

		//get properties in values
	    var properties = Object.keys(values);

	    properties.forEach(function(property) {

	        //build regex
	        var exp = RegExp('{' + property + '}', 'g');

	        //replace instances of property placeholder with value
	        string = string.replace(exp, values[property]);
	    });

	    return string;
	}


    function randomInteger(min, max) {
        return Math.floor(Math.random() * (max - min)) + min;
    }


    function createLabel(text, fontSize, bold, frame) {

        var label = [[NSTextField alloc] initWithFrame:frame];
        [label setStringValue:text];
        if(bold) {
            [label setFont:[NSFont boldSystemFontOfSize:fontSize]];
        }
        else {
            [label setFont:[NSFont systemFontOfSize:fontSize]];
        }
        [label setBezeled:false];
        [label setDrawsBackground:false];
        [label setEditable:false];
        [label setSelectable:false];

        return label;
    }


    function createCheckbox(text, checked, frame) {

        checked = (checked == false) ? NSOffState : NSOnState;

        var checkbox = [[NSButton alloc] initWithFrame: frame];
        [checkbox setButtonType: NSSwitchButton];
        [checkbox setBezelStyle: 0];
        [checkbox setTitle: text];
        [checkbox setState: checked];

        return checkbox;
    }


    function createSelect(items, selectedIndex, frame) {

        var select = [[NSPopUpButton alloc] initWithFrame: frame pullsDown: false];
        [select addItemsWithTitles: items];
        [select selectItemAtIndex: selectedIndex];

        return select;
    }


    function createAlert(title, message, iconFileName) {

        var alert = [COSAlertWindow new];
        [alert setMessageText: title];
        [alert setInformativeText: message];

        if(iconFileName) {
            var scriptPath = context.scriptPath;
            var iconPath = [[NSImage alloc] initByReferencingFile: [scriptPath stringByAppendingPathComponent: iconFileName]];
            [alert setIcon: icon];
        }

        return alert;
    }


})(Library);