// This plugin reverses the positions of selected layers.

#import 'inventory.js'

var _selection = null;
var leftPositions = [];
var topPositions = [];
var layersMeta = [];

// Run
if (selection.count() > 1) {

    // remember the selection
    _selection = selection;

    // sort selected layers
    sortLayers(selection);
} else if (selection.count() == 1 && selection[0].children().count() > 0){

    // remember the selection
    _selection = selection;

    var group = _selection[0];
    // sort selected group
    sortLayers(group.layers().array());
} else {
    [doc showMessage:"Cannot sort single layers."]
}

// Restore selection
com.getflourish.layers.select(_selection);

function sortLayers (layers) {

    // Loop through all selected layers

    for (var i = 0; i < layers.count(); i++) {
        var layer = layers[i];

        layersMeta.push({
            "name": layer.name(),
            "layer": layer,
            "top": layer.frame().top(),
            "left": layer.frame().left()
        });

        // Remember the position of each layer

        topPositions.push(parseInt(layer.frame().y()));
        leftPositions.push(parseInt(layer.frame().x()));

    }

    // sort positions first
    topPositions.sort(sortNumber);
    leftPositions.sort(sortNumber);

    // then reverse positions
    topPositions.reverse();
    leftPositions.reverse();

    // Finally, layout the sorted layers

    // Sort layers by top positions
    layersMeta.sort(sortTop);

    for (var i = 0; i < layersMeta.length; i++) {
        layersMeta[i].layer.frame().setY(topPositions[i]);
    }

    // Sort layers by left positions
    layersMeta.sort(sortLeft);

    for (var i = 0; i < layersMeta.length; i++) {
        layersMeta[i].layer.frame().setX(leftPositions[i]);
    }
}


// Sorts numbers. By default, sort would handle numbers as strings and thus not sort them as intended.
function sortNumber(a, b) {
    return a - b;
}

// Sorts layers by their top position
function sortTop(a, b) {
    return a.top - b.top;
}


// Sorts layers by their top position
function sortLeft(a, b) {
    return a.left - b.left;
}
