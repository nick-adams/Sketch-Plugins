// (ctrl option command s)

/**
 * This plugin can sort layers by positions, layer name or text value
 *
 * Florian Schulz Copyright 2014, MIT License
 */


#import 'inventory.js'

var artboards = false;
var keepTop = false;
var keepLeft = false;
var maxExamples = 3;
var numberOfTextLayersPerGroup = 0;
var _selection;
var sortableValues = [];
var sortIndex = 0;
var layersMeta = [];
var leftPositions = [];
var topPositions = [];


function sortLayers (_selection) {

	// Loop through all selected layers

	for (var i = 0; i < _selection.count(); i++) {

        var layers = _selection.objectAtIndex(i).children();
        var textLayers = [];
        var numTextLayers = 0;
        var strings = [];

        // Check if the selected layers is an artboard

        if (_selection[i].className() == "MSArtboardGroup") {
            artboards = true;
            var layer = _selection[i];
        } else {

            // Loop through all child layers of the group

            for (var j = 0; j < layers.count(); j++) {
                var layer = layers.objectAtIndex(j);

                // Proceed with text layers

                if (layer.className() == "MSTextLayer") {

                    // Remember the string

                    strings.push(layer.stringValue());
                    numTextLayers++;

                    // Remember the maximum number of text layers per group

                    if (numTextLayers > numberOfTextLayersPerGroup) {
                        numberOfTextLayersPerGroup = numTextLayers;

                        // Create example string for the drop down

                        sortableString = layer.name();
                        sortableValues.push(sortableString);
                    } else {
                        if (i < maxExamples) {
                            sortableValues[numTextLayers-1] += ", " + layer.name();
                        } else if(i == maxExamples) {
                            sortableValues[numTextLayers-1] += ", …";
                        }
                    }
                }
            }
        }

        // For each layer group, save the corresponding values of the text layers

        layersMeta.push({
            "name": layer.name(),
            "layer": _selection[i],
            "strings": strings,
            "top": _selection[i].frame().top(),
            "left": _selection[i].frame().left()
        });

        // Remember the position of each layer

        topPositions.push(parseInt(_selection[i].frame().y()));
        leftPositions.push(parseInt(_selection[i].frame().x()));


	}

	// Sort positions

	topPositions.sort(sortNumber);
	leftPositions.sort(sortNumber);


	// Let the user select the text field that should be sorted on

	if (numberOfTextLayersPerGroup > 0) {

        // Show sort options

        var options = ["Text (A->Z)", "Text (Z->A)", "Layer Name (A->Z)", "Layer Name (Z->A)", "Top", "Left", "Random"];
        var choice = createSelect('How do you want to sort?', options, 0)
        var index = choice[1];
        sortMode = index;

        if (numberOfTextLayersPerGroup > 1 && sortMode < 2) {
            // Show text layer selection menu

            var choice = createSelect('What text layer do you want to sort on?', sortableValues, 0)
            var index = choice[1];
            sortIndex = index;
        }

        switch (sortMode) {
            case 0:
                layersMeta.sort(sortText);
                break;
            case 1:
                layersMeta.sort(sortText);
                layersMeta.reverse();
                break;
            case 2:
                layersMeta.sort(sortName);
                layersMeta.reverse();
                break;
            case 3:
                layersMeta.sort(sortName);
                break;
            case 4:
                layersMeta.sort(sortTop);
                keepLeft = true;
                break;
            case 5:
                layersMeta.sort(sortLeft);
                keepTop = true;
                break;
            case 6:
                shuffle(layersMeta);
                break;
            default:
                break;
        }

	} else if (numberOfTextLayersPerGroup == 0) {

        // Limit the sort options if there are no text layers

        var options = ["Top", "Left", "Layer Name", "Layer Name (Reverse)"];
        var choice = createSelect('How do you want to sort?', options, 0)
        var index = choice[1];
        sortMode = index;

        switch (sortMode) {
            case 0:
                layersMeta.sort(sortTop);
                keepLeft = true;
                break;
            case 1:
                layersMeta.sort(sortLeft);
                keepTop = true;
                break;
            case 2:
                layersMeta.sort(sortName);
                break;
            case 3:
                layersMeta.sort(sortName);
                layersMeta.reverse();
                break;
            default:
                break;
        }
    }

	// Finally, layout the sorted layers

	for (var i = 0; i < layersMeta.length; i++) {
        if (!keepTop) layersMeta[i].layer.frame().setY(topPositions[i]);
		if (!keepLeft) layersMeta[i].layer.frame().setX(leftPositions[i]);
	}
}

// Run
if (selection.count() > 1) {

    // remember the selection
    _selection = selection;

    // sort selected layers
    sortLayers(selection);
} else if (selection.count() == 1 && selection[0].children().count() > 0){

    // remember the selection
    _selection = selection;

    var group = _selection[0];

    // sort selected group
    sortLayers(group.layers().array());
} else {
    [doc showMessage:"Cannot sort single layers."]
}

var layersMetaArray = [];

for (var i = 0; i < layersMeta.length; i++) {
    layersMetaArray.push(layersMeta[i].layer);
}

layersMetaArray.reverse();
com.getflourish.layers.sortIndices(layersMetaArray);

// Restore selection
com.getflourish.layers.select(_selection);


// Sorts text layer strings in a ascending order

function asc(a, b) {
	if (a.strings[sortIndex] < b.strings[sortIndex])
		return -1;
	if (a.strings[sortIndex] > b.strings[sortIndex])
		return 1;
	return 0;
}

// Sorts text layer strings in a descending order

function desc(a, b) {
	if (a.strings[sortIndex] > b.strings[sortIndex])
		return -1;
	if (a.strings[sortIndex] < b.strings[sortIndex])
		return 1;
	return 0;
}

// Sorts text layer strings in a ascending order

function nameAsc(a, b) {
    if (a.name < b.name)
        return -1;
    if (a.name > b.name)
        return 1;
    return 0;
}

// Sorts text layer strings in a descending order
function nameDesc(a, b) {
    if (a.name > b.name)
        return -1;
    if (a.name < b.name)
        return 1;
    return 0;
}

// Sorts numbers. By default, sort would handle numbers as strings and thus not sort them as intended.
function sortNumber(a,b) {
    return a - b;
}

// Sorts layers by their top position
function sortTop(a,b) {
    return a.top - b.top;
}

// Sorts layers by their top position
function sortLeft(a, b) {
    return a.left - b.left;
}


// Shuffle array
function shuffle(array) {
  var currentIndex = array.length, temporaryValue, randomIndex ;

  // While there remain elements to shuffle...
  while (0 !== currentIndex) {

    // Pick a remaining element...
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex -= 1;

    // And swap it with the current element.
    temporaryValue = array[currentIndex];
    array[currentIndex] = array[randomIndex];
    array[randomIndex] = temporaryValue;
  }

  return array;
}

/*
 * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license
 * Author: Jim Palmer (based on chunking idea from Dave Koelle)
 */

function sortText (_a, _b) {
    var a = _a.strings[sortIndex];
    var b = _b.strings[sortIndex];

    return naturalSort(a, b);
}

function sortName (_a, _b) {
    var a = _a.name;
    var b = _b.name;

    return naturalSort(a, b);
}

 function naturalSort (a, b) {
    var re = /(^-?[0-9]+(\.?[0-9]*)[df]?e?[0-9]?$|^0x[0-9a-f]+$|[0-9]+)/gi,
        sre = /(^[ ]*|[ ]*$)/g,
        dre = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,
        hre = /^0x[0-9a-f]+$/i,
        ore = /^0/,
        i = function(s) { return naturalSort.insensitive && (''+s).toLowerCase() || ''+s },
        // convert all to strings strip whitespace
        x = i(a).replace(sre, '') || '',
        y = i(b).replace(sre, '') || '',
        // chunk/tokenize
        xN = x.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
        yN = y.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
        // numeric, hex or date detection
        xD = parseInt(x.match(hre)) || (xN.length != 1 && x.match(dre) && Date.parse(x)),
        yD = parseInt(y.match(hre)) || xD && y.match(dre) && Date.parse(y) || null,
        oFxNcL, oFyNcL;
    // first try and sort Hex codes or Dates
    if (yD)
        if ( xD < yD ) return -1;
        else if ( xD > yD ) return 1;
    // natural sorting through split numeric strings and default strings
    for(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {
        // find floats not starting with '0', string or 0 if not defined (Clint Priest)
        oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;
        oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;
        // handle numeric vs string comparison - number < string - (Kyle Adams)
        if (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }
        // rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'
        else if (typeof oFxNcL !== typeof oFyNcL) {
            oFxNcL += '';
            oFyNcL += '';
        }
        if (oFxNcL < oFyNcL) return -1;
        if (oFxNcL > oFyNcL) return 1;
    }
    return 0;
}
// Creates a dialog with a drop down

function createSelect(msg, items, selectedItemIndex){
  selectedItemIndex = selectedItemIndex || 0

  var accessory = [[NSComboBox alloc] initWithFrame:NSMakeRect(0,0,200,25)]
  [accessory addItemsWithObjectValues:items]
  [accessory selectItemAtIndex:selectedItemIndex]

  var alert = [[NSAlert alloc] init]
  [alert setMessageText:msg]
  [alert addButtonWithTitle:'OK']
  [alert addButtonWithTitle:'Cancel']
  [alert setAccessoryView:accessory]

  var responseCode = [alert runModal]
  var sel = [accessory indexOfSelectedItem]

  return [responseCode, sel]
}

// Calls menu commands

function sendAction(commandToPerform) {
	try {
		[NSApp sendAction:commandToPerform to:nil from:doc]
	} catch(e) {
		my.log(e)
	}
};

function sendBackward() {
	sendAction('moveBackward:');
}
function sendForward() {
	sendAction('moveForward:');
}
function sendBack() {
	sendAction('moveToBack:');
}

var numberOfTextLayersPerGroup = null;
var sortableValues = null;
var sortIndex = null;
var layersMeta = null;
var leftPositions = null;
var topPositions = null;